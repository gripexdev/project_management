@model ProjectDashboard.Models.ProjectDetailsViewModel

@{
    ViewData["Title"] = "Project Details Page";
}

@* TODO: Show tasks for for forEach employee for employee *@
<div class="container mt-4">
    <!-- Project Details Card -->
    <div class="card shadow-sm mb-5">
        <div class="card-header bg-primary text-white mb-4">
            <h4 class="card-title mb-0">@Model.Name</h4>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <p class="mb-2"><strong>Description:</strong> @Model.Description</p>
                    <p class="mb-2"><strong>Status:</strong>
                        @if (Model.Status.ToString() == "InProgress")
                        {
                            <span class="badge bg-label-primary me-1">In Progress</span>
                        }
                        else if (Model.Status.ToString() == "Completed")
                        {
                            <span class="badge bg-label-success me-1">Completed</span>
                        }
                        else if (Model.Status.ToString() == "Pending")
                        {
                            <span class="badge bg-label-info me-1">Pending</span>
                        }
                        else
                        {
                            <span class="badge bg-label-secondary me-1">Unknown</span>
                        }
                    </p>
                </div>
                <div class="col-md-6">
                    <p class="mb-2"><strong>Start Date:</strong> @Model.StartDate.ToShortDateString()</p>
                    <p class="mb-2"><strong>End Date:</strong> @Model.EndDate.ToShortDateString()</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Assigned Employees Section -->
    <div class="card shadow-sm">
        <div class="card-header bg-secondary text-white mb-4">
            <h5 class="card-title mb-0">Assigned Employees</h5>
        </div>
        <div class="card-body">
            @if (!Model.AssignedEmployees.Any())
            {
                <div class="alert alert-info mb-0">
                    No employees are assigned to this project.
                </div>
            }
            else
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                    @foreach (var employee in Model.AssignedEmployees)
                    {
                        <div class="col">
                            <div class="card h-100 shadow-sm">
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">@employee.Name</h5>
                                    <p class="card-text"><strong>Role:</strong> @employee.RoleInProject</p>
                                    <p class="card-text"><small class="text-muted">Joined on
                                            @employee.JoinedDate.ToShortDateString()</small></p>

                                    <!-- Tasks Accordion -->
                                    <div class="accordion mt-3" id="tasksAccordion-@employee.Id">
                                        <div class="accordion-item">
                                            <h2 class="accordion-header" id="heading-@employee.Id">
                                                <button class="accordion-button collapsed" type="button"
                                                    data-bs-toggle="collapse" data-bs-target="#collapse-@employee.Id"
                                                    aria-expanded="false" aria-controls="collapse-@employee.Id">
                                                    Tasks (@employee.Tasks.Count)
                                                </button>
                                            </h2>
                                            <div id="collapse-@employee.Id" class="accordion-collapse collapse"
                                                aria-labelledby="heading-@employee.Id"
                                                data-bs-parent="#tasksAccordion-@employee.Id">
                                                <div class="accordion-body">
                                                    @if (employee.Tasks.Any())
                                                    {
                                                        <ul class="list-group list-group-flush">
                                                            @foreach (var task in employee.Tasks)
                                                            {
                                                                <li class="list-group-item">
                                                                    <strong>@task.TaskName</strong>
                                                                    <p class="mb-1">@task.TaskDescription</p>
                                                                    <small class="text-muted">
                                                                        <strong>Status:</strong> @task.Status |
                                                                        <strong>Priority:</strong> @task.Priority |
                                                                        <strong>Progress:</strong>
                                                                    </small>
                                                                    <!-- Progress Bar -->
                                                                    <div class="progress mt-2" style="height: 16px;">
                                                                        <div class="progress-bar" role="progressbar" style="width: @task.Progress%;" aria-valuenow="@task.Progress" aria-valuemin="0" aria-valuemax="100">
                                                                            @task.Progress%
                                                                        </div>
                                                                    </div>
                                                                </li>
                                                            }
                                                        </ul>
                                                    }
                                                    else
                                                    {
                                                        <p class="text-muted">No tasks assigned.</p>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="mt-auto d-flex gap-2">
                                        <!-- Assign Task Button -->
                                        <button type="button" class="btn btn-primary btn-sm flex-grow-1" data-bs-toggle="modal"
                                            data-bs-target="#createTaskModal"
                                            onclick="openCreateTaskModal(@Model.Id, @employee.Id)">
                                            <i class="bx bx-plus me-1"></i> Task
                                        </button>
                                        <!-- Unassign Employee Button -->
                                        <button type="button" class="btn btn-danger btn-sm flex-grow-1"
                                            onclick="unassignEmployee(@Model.Id, @employee.Id)">
                                            <i class="bx bx-trash me-1"></i> Unassign
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Toast Container -->
<div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 11"></div>

<!-- Modal for Creating a Task -->
<div class="modal fade" id="createTaskModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createTaskForm">
                <input type="hidden" id="projectId" name="ProjectId" />
                <input type="hidden" id="employeeId" name="EmployeeId" />
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Task Name</label>
                        <input type="text" id="taskName" name="TaskName" class="form-control" />
                        <span id="taskNameError" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Task Description</label>
                        <textarea id="taskDescription" name="TaskDescription" class="form-control"></textarea>
                        <span id="taskDescriptionError" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Start Date</label>
                        <input type="date" id="startDate" name="StartDate" class="form-control" />
                        <span id="startDateError" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">End Date</label>
                        <input type="date" id="endDate" name="EndDate" class="form-control" />
                        <span id="endDateError" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Create Task</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section PageScripts {
    <script>

        // Open the modal to create a task
        function openCreateTaskModal(projectId, employeeId) {
            // Clear form fields and errors
            document.getElementById('projectId').value = projectId;
            document.getElementById('employeeId').value = employeeId;
            document.getElementById('taskName').value = '';
            document.getElementById('taskDescription').value = '';
            document.getElementById('startDate').value = '';
            document.getElementById('endDate').value = '';
            clearValidationErrors();
        }

        function clearValidationErrors() {
            document.getElementById('taskNameError').innerText = '';
            document.getElementById('taskDescriptionError').innerText = '';
            document.getElementById('startDateError').innerText = '';
            document.getElementById('endDateError').innerText = '';
        }

        // TODO: add prioriy to the task creation form
        // Handle form submission for adding a task
        document.getElementById('createTaskForm').addEventListener('submit', function (e) {
            e.preventDefault();

            // Clear previous errors
            clearValidationErrors();

            // Get form data
            const projectId = document.getElementById('projectId').value;
            const employeeId = document.getElementById('employeeId').value;
            const taskName = document.getElementById('taskName').value;
            const taskDescription = document.getElementById('taskDescription').value;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            // Validate input
            let isValid = true;
            if (!taskName) {
                document.getElementById('taskNameError').innerText = 'Task name is required.';
                isValid = false;
            }
            if (!taskDescription) {
                document.getElementById('taskDescriptionError').innerText = 'Task description is required.';
                isValid = false;
            }
            if (!startDate) {
                document.getElementById('startDateError').innerText = 'Start date is required.';
                isValid = false;
            }
            if (!endDate) {
                document.getElementById('endDateError').innerText = 'End date is required.';
                isValid = false;
            }

            if (!isValid) return;

            // Send request to create task
            fetch('/Project/CreateTask', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    ProjectId: parseInt(projectId),
                    EmployeeId: parseInt(employeeId),
                    TaskName: taskName,
                    TaskDescription: taskDescription,
                    StartDate: startDate,
                    EndDate: endDate
                })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        showToast('success', 'Task created successfully!');
                        const createTaskModal = bootstrap.Modal.getInstance(document.getElementById('createTaskModal'));
                        createTaskModal.hide();
                        setTimeout(() => {
                            window.location.reload(); // Refresh page after 1 second
                        }, 1000);
                    } else {
                        showToast('danger', data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('danger', 'Error creating task.');
                });
        });

        // Unassign an employee from the project
        function unassignEmployee(projectId, employeeId) {
            if (!confirm("Are you sure you want to unassign this employee and delete all related tasks?")) {
                return;
            }

            fetch('/Project/UnassignEmployeeFromProject', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    projectId: parseInt(projectId),
                    employeeId: parseInt(employeeId)
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('success', data.message);
                        setTimeout(() => {
                            window.location.reload(); // Refresh page after 1 second
                        }, 1000);
                    } else {
                        showToast('error', data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('error', 'Error unassigning employee.');
                });
        }

        // Show toast message
        function showToast(type, message) {
            var toastElement = document.createElement('div');
            toastElement.className = `toast align-items-center text-white ${type === 'error' ? 'bg-danger' : 'bg-success'} border-0 m-2`;
            toastElement.setAttribute('role', 'alert');
            toastElement.setAttribute('aria-live', 'assertive');
            toastElement.setAttribute('aria-atomic', 'true');
            toastElement.setAttribute('data-bs-autohide', 'true');
            toastElement.setAttribute('data-bs-delay', '3000');

            var toastBody = `
                                                            <div class="toast-header">
                                                                <i class='bx bx-bell me-2'></i>
                                                                <strong class="me-auto">Notification</strong>
                                                                <small>Just now</small>
                                                                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                                                            </div>
                                                            <div class="toast-body">
                                                                ${message}
                                                            </div>`;

            toastElement.innerHTML = toastBody;

            var toastContainer = document.getElementById('toastContainer');
            toastContainer.appendChild(toastElement);

            var toast = new bootstrap.Toast(toastElement);
            toast.show();
        }
    </script>
}