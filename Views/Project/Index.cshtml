@model ProjectDashboard.Models.ProjectIndexViewModel

@{
    ViewData["Title"] = "Project Page";
}

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Projects</h5>
        <!-- Button trigger modal -->
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProjectModal">
            Add Project
        </button>
    </div>

    <div class="table-responsive text-nowrap">
        @if (Model.Projects == null || !Model.Projects.Any())
        {
            <p style="text-align: center;">No projects at the moment.</p>
        }
        else
        {
            <table class="table">
                <thead class="table-light">
                    <tr>
                        <th>Project</th>
                        <th>Description</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody class="table-border-bottom-0">
                    @foreach (var project in Model.Projects)
                    {
                        <tr>
                            <td>@project.Name</td>
                            <td>@project.Description</td>
                            <td>@project.StartDate.ToString("yyyy-MM-dd")</td>
                            <td>@project.EndDate.ToString("yyyy-MM-dd")</td>
                            <td>
                                @if (project.Status.ToString() == "InProgress")
                                {
                                    <span class="badge bg-label-primary me-1">In Progress</span>
                                }
                                else if (project.Status.ToString() == "Completed")
                                {
                                    <span class="badge bg-label-success me-1">Completed</span>
                                }
                                else if (project.Status.ToString() == "Pending")
                                {
                                    <span class="badge bg-label-info me-1">Pending</span>
                                }
                                else
                                {
                                    <span class="badge bg-label-secondary me-1">Unknown</span>
                                }
                            </td>
                            <td>
                                <div class="dropdown">
                                    <button type="button" class="btn p-0 dropdown-toggle hide-arrow"
                                        data-bs-toggle="dropdown"><i class="bx bx-dots-vertical-rounded"></i></button>
                                    <div class="dropdown-menu">
                                        <a class="dropdown-item" href="javascript:void(0);"><i class="bx bx-edit-alt me-1"></i>
                                            Edit</a>
                                        <a class="dropdown-item" href="javascript:void(0);"><i class="bx bx-trash me-1"></i>
                                            Delete</a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="d-flex justify-content-center">
                <ul class="pagination">
                    @if (Model.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link"
                                href="@Url.Action("Index", new { page = Model.CurrentPage - 1, pageSize = Model.PageSize })">Previous</a>
                        </li>
                    }
                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = i, pageSize = Model.PageSize })">@i</a>
                        </li>
                    }
                    @if (Model.CurrentPage < Model.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link"
                                href="@Url.Action("Index", new { page = Model.CurrentPage + 1, pageSize = Model.PageSize })">Next</a>
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
</div>

<div class="mt-4">

    <!-- Modal -->
    <div class="modal fade" id="addProjectModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Project</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="addProjectForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <input type="text" id="name" name="Name" class="form-control">
                            <span class="text-danger" id="nameError"></span>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea id="description" name="Description" class="form-control"></textarea>
                            <span class="text-danger" id="descriptionError"></span>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Start Date</label>
                            <input type="date" id="startDate" name="StartDate" class="form-control">
                            <span class="text-danger" id="startDateError"></span>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">End Date</label>
                            <input type="date" id="endDate" name="EndDate" class="form-control">
                            <span class="text-danger" id="endDateError"></span>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select id="status" name="Status" class="form-control">
                                <option value="Pending">Pending</option>
                                <option value="InProgress">In Progress</option>
                                <option value="Completed">Completed</option>
                            </select>
                            <span class="text-danger" id="statusError"></span>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div id="toastContainer" aria-live="polite" aria-atomic="true" class="position-fixed bottom-0 end-0 p-3"
    style="z-index: 1100;">
</div>



@* TODO: put js code in a separate file *@
@section PageScripts {
    <script src="~/js/ui-toasts.js"></script>
    <script>
        document.getElementById('addProjectForm').addEventListener('submit', function (e) {
            e.preventDefault();

            var formData = new FormData(this);

            fetch('@Url.Action("Add", "Project")', {
                method: 'POST',
                body: formData,
                headers: {
                    'Accept': 'application/json'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Response Data:', data); // Debugging
                    // when project is successfully added
                    if (data.success) {
                        // Show success toast
                        @* showToast('success', data.message); *@

                        // Close the modal
                        var modal = bootstrap.Modal.getInstance(document.getElementById('addProjectModal'));
                        modal.hide();

                        // Wait for the toast to be visible before refreshing
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000); // 1 second
                        showToast('success', data.message);
                    } else {
                        // Show error toast
                        showToast('error', data.message);
                        // Clear previous errors
                        document.querySelectorAll('.text-danger').forEach(el => el.textContent = '');
                        // Display validation errors
                        for (var field in data.errors) {
                            var errorElement = document.getElementById(field.toLowerCase() + 'Error'); // Ensure lowercase
                            if (errorElement) {
                                errorElement.textContent = data.errors[field].join(', ');
                            }
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        });

        function showToast(type, message) {
            var toastElement = document.createElement('div');
            toastElement.className = `toast align-items-center text-white ${type === 'error' ? 'bg-danger' : 'bg-success'} border-0 m-2`;
            toastElement.setAttribute('role', 'alert');
            toastElement.setAttribute('aria-live', 'assertive');
            toastElement.setAttribute('aria-atomic', 'true');
            toastElement.setAttribute('data-bs-autohide', 'true');
            toastElement.setAttribute('data-bs-delay', '3000');

            var toastBody = `
                        <div class="toast-header">
                            <i class='bx bx-bell me-2'></i>
                            <strong class="me-auto">Notification</strong>
                            <small>Just now</small>
                            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">
                            ${message}
                        </div>`;

            toastElement.innerHTML = toastBody;

            var toastContainer = document.getElementById('toastContainer');
            toastContainer.appendChild(toastElement);

            var toast = new bootstrap.Toast(toastElement);
            toast.show();
        }
    </script>
}
