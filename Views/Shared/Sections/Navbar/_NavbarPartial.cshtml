@* ! Brand demo (display only for navbar-full and hide on below xl) *@
@if (ViewData["navbarFull"] != null)
{
  <div class="navbar-brand app-brand demo d-none d-xl-flex py-0 me-4">
    <a asp-controller="Dashboards" asp-action="Index" class="app-brand-link gap-2">
      <span class="app-brand-logo demo">
        @await Html.PartialAsync("../_Partials/_Macros")
      </span>
      <span class="app-brand-text demo menu-text fw-bold">@TempData.Peek("appName")</span>
    </a>
  </div>
}

@* ! Not required for layout-without-menu *@
@if (ViewData["navbarHideToggle"] == null)
{
  <div class="layout-menu-toggle navbar-nav align-items-xl-center me-4 me-xl-0 d-xl-none">
    <a class="nav-item nav-link px-0 me-xl-6" href="javascript:void(0)">
      <i class="bx bx-menu bx-md"></i>
    </a>
  </div>
}

<div class="navbar-nav-right d-flex align-items-center" id="navbar-collapse">

  <!-- Search -->
  <div class="navbar-nav align-items-center">
    <div class="nav-item d-flex align-items-center">
      <i class="bx bx-search bx-md"></i>
      <input type="text" class="form-control border-0 shadow-none ps-1 ps-sm-2" placeholder="Search..."
        aria-label="Search...">
    </div>
  </div>
  <!-- /Search -->

  <ul class="navbar-nav flex-row align-items-center ms-auto">

    <!-- Notifications -->
    @if (User.IsInRole("User"))
    {
      <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="notificationsDropdown" role="button" data-bs-toggle="dropdown"
          aria-expanded="false">
          Notifications
          <span id="notificationBadge" class="badge bg-danger"></span>
        </a>
        <ul id="notificationList" class="dropdown-menu dropdown-menu-end" aria-labelledby="notificationsDropdown">
          <!-- Notifications will be dynamically loaded here -->
        </ul>
      </li>
    }
    <!-- /Notifications -->

    <!-- User -->
    <li class="nav-item navbar-dropdown dropdown-user dropdown">
      <a class="nav-link dropdown-toggle hide-arrow p-0" href="javascript:void(0);" data-bs-toggle="dropdown">
        <div class="avatar avatar-online">
          <img src="~/img/avatars/1.png" alt class="w-px-40 h-auto rounded-circle">
        </div>
      </a>
      <ul class="dropdown-menu dropdown-menu-end">
        <li>
          <a class="dropdown-item" href="javascript:void(0);">
            <div class="d-flex">
              <div class="flex-shrink-0 me-3">
                <div class="avatar avatar-online">
                  <img src="~/img/avatars/1.png" alt class="w-px-40 h-auto rounded-circle">
                </div>
              </div>
              <div class="">
                <h6 class="mt-2">@User.Identity.Name</h6>
              </div>
            </div>
          </a>
        </li>
        <li>
          <div class="dropdown-divider my-1"></div>
        </li>
        <li>
          <a class="dropdown-item" asp-controller="Account" asp-action="Profile">
            <i class="bx bx-user bx-md me-2"></i>
            <span>My Profile</span>
          </a>
        </li>
        <li>
          <div class="dropdown-divider my-1"></div>
        </li>
        @if (User.Identity.IsAuthenticated)
        {
          <li>
            <a class="dropdown-item" asp-controller="Account" asp-action="Logout">
              <i class="bx bx-power-off bx-md me-2"></i>
              <span>Log Out</span>
            </a>
          </li>
        }

      </ul>
    </li>
    <!--/ User -->

  </ul>
</div>


<!-- Script to fetch notifications -->
@if (User.IsInRole("User"))
{
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const notificationBadge = document.getElementById('notificationBadge');
      const notificationList = document.getElementById('notificationList');

      async function fetchNotifications() {
        const response = await fetch('/UserHome/GetNotifications');
        const notifications = await response.json();

        // Update badge count
        notificationBadge.textContent = notifications.length;

        // Populate dropdown
        notificationList.innerHTML = '';
        notifications.forEach(notification => {
          const li = document.createElement('li');
          li.classList.add('dropdown-item');
          li.innerHTML = `
                        <div>${notification.message}</div>
                        <small class="text-muted">${new Date(notification.createdAt).toLocaleString()}</small>
                        <button class="btn btn-sm btn-link mark-as-read" data-id="${notification.id}">Mark as Read</button>
                    `;
          notificationList.appendChild(li);
        });

        // Add event listeners for "Mark as Read"
        document.querySelectorAll('.mark-as-read').forEach(button => {
          button.addEventListener('click', async function () {
            const notificationId = this.getAttribute('data-id');
            await fetch(`/UserHome/MarkNotificationAsRead/${notificationId}`, { method: 'POST' });
            fetchNotifications(); // Refresh notifications
          });
        });
      }

      fetchNotifications();
    });
  </script>
}